
map $host $realm {
{% for realm, details in salt['pillar.get']('realms').items() %}
	{{ details.get('domain_name') }}	{{ realm }};
{% endfor %}
}


upstream keycloak_server {
    server 172.25.120.59:8080 max_fails=1 fail_timeout=10s;
}

upstream ics_server {
    server 172.25.110.97:8080 max_fails=1 fail_timeout=10s;
}

upstream tomcat_server {
    server 172.25.115.108:8080 max_fails=1 fail_timeout=10s;
}

server {
        listen  80;
        listen  [::]:80;
#        return  301 https://$host$request_uri;


################################################################################
        proxy_pass_request_headers      on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header HTTP_AUTHORIZATION $http_authorization;


        location  /ics-web {
                if ($args = "") {
					rewrite ^(.*)$ $1?realm=$realm break;
                }
                if ($args !~ "realm=") {
					set $args $args&realm=$realm;
                }
				
				# rewrite ^(.*)$ $1?realm=$realm break;
                proxy_pass http://ics_server;
        }

         location  /ics-api {
         	proxy_set_header realm $realm;
			proxy_pass http://ics_server;
			
        }


        location = /ics-doc {
#                if ($args = "") {
#                        rewrite ^(.*)$ $1?realm=$realm break;
#                }
#                if ($args !~ "realm=") {
#                           set $args $args&realm=$realm;
#                }



#               # proxy_set_header realm $realm;

                #index index.html;
                try_files $uri $uri/index.html;
        }



#####################################################################################
        # redirect root url to /$host/tms-web
#        location = / {
#                return 301 $scheme://$host/tms-web;
#        }

#       location /tms-api/rest/stats {
#               allow 172.25.115.52;
#               deny  all;
#               proxy_pass http://tms_api_server;
#        }

#        location /tms {
#                proxy_pass http://tms_api_server;
#                #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
#        }


}


server {
        listen 443 ssl;

        #server_name localhost;
        access_log /var/log/nginx/access.log combined;
        error_log /var/log/nginx/error.log error;

        #by default, nginx root is /usr/share/nginx/html
        #root /usr/share/nginx/html
        error_page 502 =503 /503.html;

        ssl on;
        ssl_certificate         /etc/nginx/ssl/server-chain.crt;
        ssl_certificate_key     /etc/nginx/ssl/server.key;


        # Sessions are stored in the SSL session cache shared between worker processes and configured by the ssl_session_cache directive.
        # 1 megabyte of cache contains about 4000 sessions. The default cache timeout is 5 minutes.
        # This timeout can be increased using the ssl_session_timeout directive.
        # Below is a configuration optimized for a multi-core system with 10 megabyte shared session cache:

        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 10m;

        ssl_prefer_server_ciphers       on;
        ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers                     ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DSS:!DES:!RC4:!3DES:!MD5:!PSK;
        ssl_ciphers                                             ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:HIGH:!RC4:!MD5:!aNULL:!EDH:!CAMELLIA:!3DES;

        add_header Strict-Transport-Security "max-age=31536000";

        proxy_pass_request_headers      on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header HTTP_AUTHORIZATION $http_authorization;



        location /auth {
                real_ip_header    X-Forwarded-For;
                proxy_set_header Host $host;
                proxy_pass http://keycloak_server;
proxy_set_header X-Forwarded-For 172.25.120.59;
proxy_set_header X-Forwarded-Proto https;
        }



        # redirect root url to /$host/sdemo
        location = / {
                return 301 https://$host/sdemo;
        }

        location /sdemo {
                proxy_pass http://tomcat_server;
                #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        location /config {

                rewrite ^/config/(/?)(.*) /$2 break;

                proxy_set_header        Host invenco-nz-qa-tmsfiles-configuration-target.s3-ap-southeast-2.amazonaws.com;
                proxy_pass              https://invenco-nz-qa-tmsfiles-configuration-target.s3-ap-southeast-2.amazonaws.com;
        }

        location /softwarerelease {

                rewrite ^/softwarerelease/(/?)(.*) /$2 break;

                proxy_set_header        Host s3-ap-southeast-2.amazonaws.com;
                proxy_pass              https://s3-ap-southeast-2.amazonaws.com;

        }

        #static content
        location /content/ {
                root   /opt/memribox;
        }

}
                                                                                                                                                         
        