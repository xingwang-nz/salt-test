{% set logging_server_ip = salt['pillar.get']('logging_server:ip') %}
{% set redis_port = salt['pillar.get']('logging_server:redis_port') %}
{% set rsyslog_port = salt['pillar.get']('logging_server:rsyslog_port') %}
{% set logstash_port = salt['pillar.get']('logging_server:logstash_port') %}
{% set elasticsearch_cluster_name = salt['pillar.get']('elasticsearch:cluster_name') %}

input {
     tcp {
        port => {{ logstash_port }}
        codec => json
    }
    
    syslog {
		type => syslog
		port => {{ rsyslog_port }}
    }
    
# enable the following redis if need to use redis as message broker for logstash    
#  redis {
#       host => "{{ logging_server_ip }}"
#       port => {{ redis_port }}
#       type => "tms"
#       data_type => "list"
#       key => "logstash"
#       format => "json_event"    
  
}



#filter {
#  grok {
#   type => "syslog"
#   pattern => ["AUDIT type=%{WORD:audit_type} msg=audit\(%{NUMBER:audit_epoch}:%{NUMBER:audit_counter}\): user pid=%{NUMBER:audit_pid} uid=%{NUMBER:audit_uid} auid=%{NUMBER:audit_auid} subj=%{WORD:audit_subject} msg=%{GREEDYDATA:audit_message}"]
#   pattern => ["AUDITLOGIN type=%{WORD:audit_type} msg=audit\(%{NUMBER:audit_epoch}:%{NUMBER:audit_counter}\): login pid=%{NUMBER:audit_pid} uid=%{NUMBER:audit_uid} old auid=%{NUMBER:old_auid} new auid=%{NUMBER:new_auid} old ses=%{NUMBER:old_ses} new ses=%{NUMBER:new_ses}"]
#  }
#}

#filter {
#    grok {
#        match => { "message" => "type=%{WORD:audit_type} msg=audit\(%{NUMBER:audit_epoch}:%{NUMBER:audit_counter}\): user pid=%{NUMBER:audit_pid} uid=%{NUMBER:audit_uid} auid=%{NUMBER:audit_auid} subj=%{WORD:audit_subject} msg=%{GREEDYDATA:audit_message}" }
#    }
#    date {
#        match => [ "audit_epoch", "UNIX_MS" ]
#    }
}

output {
   #elasticsearch { host => 127.0.0.1 }
   elasticsearch { cluster => "{{ elasticsearch_cluster_name }}" }
   stdout { codec => rubydebug }
}