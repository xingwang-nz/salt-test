{% import 'lib.sls' as lib with context %}

{% set ssl_protocols = salt['pillar.get']('ssl:protocols') %}
{% set content_server_domain_name = salt['pillar.get']('ec2_server:content_server_domain_name') %}
{% set s3_bucket_name = salt['pillar.get']('tms:s3_bucket') %}
{% set s3_main_domain_name = 's3.amazonaws.com' %}
{% set s3_region_domain_name = 's3-ap-southeast-2.amazonaws.com' %}
{% set tomcat_server_hosts = salt['pillar.get']('ec2_server:tomcat_server_hosts') %}
{% set tms_public_services_access_ips = salt['pillar.get']('tms_public_services_access_ips') %}

{% set keycloak_server_host = salt['pillar.get']('keycloak_server:host') %}
{% set keycloak_server_port = salt['pillar.get']('keycloak_server:port') %}

{% set rest_baseurl_v1 = '/rest/v1' %}


map $host $realm {
{% for realm, details in salt['pillar.get']('realms').items() %}
	{{ details.get('domain_name') }}	{{ realm }};
{% endfor %}
}

{% if keycloak_server_host != None and keycloak_server_host != '' %}
upstream keycloak_server {
    server {{ keycloak_server_host }}:{{ keycloak_server_port }} max_fails=1 fail_timeout=10s;
}
{% endif %}

upstream ics_server {
	{% for tomcat_server_host in salt['pillar.get']('ec2_server:tomcat_server_hosts') %}	
    server {{ tomcat_server_host }}:8080 max_fails=1 fail_timeout=10s;
    {% endfor %}
}

upstream tomcat_server {
	{% for tomcat_server_host in tomcat_server_hosts %}	
    server {{ tomcat_server_host }}:8080 max_fails=1 fail_timeout=10s;
    {% endfor %}
}

server {
        listen  80;
        listen  [::]:80;
#        return  301 https://$host$request_uri;


################################################################################
        proxy_pass_request_headers      on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header HTTP_AUTHORIZATION $http_authorization;


       location ^~ /tms-api/rest/stats/ {
#               allow 172.25.115.52;
#               deny  all;
               proxy_pass http://tomcat_server;
        }
        
{% if keycloak_server_host != None and keycloak_server_host != '' %}
#        location ~ ^/auth/admin/realms/[^/]+$ {
#			if ($request_method = DELETE) {
#				return 403;
#			}

		#if ( $request_body ~ "\\x22name\\x22:\\x22view-clients\\x22" ) {
			#	set $test "${test}C";
		#}

		#if ( $test = "PC" ) {
			#	return 403;
		#}


#        	proxy_set_header Host $host;
#			proxy_pass http://keycloak_server;
#			proxy_set_header X-Forwarded-For {{ keycloak_server_host }};
#			proxy_set_header X-Forwarded-Proto https;
#       }
        
        location /auth {
        	proxy_set_header Host $host;
			proxy_pass http://keycloak_server;
			proxy_set_header X-Forwarded-For {{ keycloak_server_host }};
			proxy_set_header X-Forwarded-Proto https;
        }
{% endif %}

       
		#keycloak configuration files
        location ~* ^/(tms-web|ics-web)/keycloak/.*\.json$ {
            rewrite ^/(tms-web|ics-web)/(.*)$  /$2 break;
            try_files $uri $uri/;
         }

 		location = /tms-web/realmheader {
        	add_header realm $realm;
            return 200;
        }
        
         location ~ ^/(tms-web|ics-web) {
                if ($args = "") {
					rewrite ^(.*)$ $1?realm=$realm break;
                }
                if ($args !~ "realm=") {
					set $args $args&realm=$realm;
                }
				proxy_set_header Host $host;
				# rewrite ^(.*)$ $1?realm=$realm break;
                proxy_pass http://ics_server;
        }

		#redirect legacy api to new tms-api
        location ~ ^/tms/rest/targets/[^/]+/configurationfiles$ {
                if ($request_method = GET) {
                         rewrite ^/tms/(/?)(.*) /tms-api/$2 break;
                }
                 proxy_set_header realm $realm;
                 proxy_set_header Host $host;
                 proxy_pass http://tomcat_server;
        }
        
         location  /ics-api {
         	proxy_set_header realm $realm;
			proxy_pass http://ics_server;
        }





        location /tms {
            proxy_set_header realm $realm;
        	proxy_set_header Host $host;
            proxy_pass http://tomcat_server;
        }
        
        location /ics {
			proxy_set_header realm $realm;
        	proxy_set_header Host $host;
            proxy_pass http://tomcat_server;
        }
#####################################################################################
# New APIs
#####################################################################################
		#ics-auth
		location ~ ^{{rest_baseurl_v1}}/(authenticate|authenticatedevice|validatetoken)$ {
			rewrite {{rest_baseurl_v1}}/(.*)$ /ics-auth/rest/$1 last;
		}
	
		#ics-job
		location ~ ^{{rest_baseurl_v1}}/jobs(/.*)?$ {
			rewrite /rest/v1/(.*)$ /ics-job/rest/$1 last;
		}

        #tms-api sites
        location ~ ^{{rest_baseurl_v1}}/sites(/.*)?$ {
                rewrite /rest/v1/(.*)$ /tms-api/rest/$1 last;
        }

        #tms-api producttypes
        location = {{rest_baseurl_v1}}/producttypes {
                rewrite /rest/v1/(.*)$ /tms-api/rest/$1 last;
        }

        #tms-api stats
        location ^~ {{rest_baseurl_v1}}/stats/ {
                rewrite /rest/v1/(.*)$ /tms-api/rest/$1 last;
        }
#####################################################################################
        # redirect root url to /$host/tms-web
#        location = / {
#                return 301 $scheme://$host/tms-web;
#        }

        location = /ics-doc {
                #index index.html;
                try_files $uri $uri/index.html;
        }

}


{% set content_domain_names = [] %}
{% for realm, details in salt['pillar.get']('realms').items() %}
		{% if details.get('domain_name') in content_domain_names %}
		{% else %}
			{% do content_domain_names.append(details.get('domain_name')) %}	
		{% endif %}
{% endfor %}
server {

        listen 443 ssl;
		
        #server_name {{ content_domain_names|join(" ") }};
        
        
        access_log /var/log/nginx/access.log combined;
        error_log /var/log/nginx/error.log error;

        #by default, nginx root is /usr/share/nginx/html
        #root /usr/share/nginx/html
        error_page 502 =503 /503.html;

        ssl on;
        ssl_certificate         /etc/nginx/ssl/server-chain.crt;
        ssl_certificate_key     /etc/nginx/ssl/server.key;


        # Sessions are stored in the SSL session cache shared between worker processes and configured by the ssl_session_cache directive.
        # 1 megabyte of cache contains about 4000 sessions. The default cache timeout is 5 minutes.
        # This timeout can be increased using the ssl_session_timeout directive.
        # Below is a configuration optimized for a multi-core system with 10 megabyte shared session cache:

        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 10m;

        ssl_prefer_server_ciphers       on;
        ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers                     ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DSS:!DES:!RC4:!3DES:!MD5:!PSK;
        ssl_ciphers                                             ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:HIGH:!RC4:!MD5:!aNULL:!EDH:!CAMELLIA:!3DES;

        add_header Strict-Transport-Security "max-age=31536000";

        proxy_pass_request_headers      on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header HTTP_AUTHORIZATION $http_authorization;


{% if keycloak_server_host != None and keycloak_server_host != '' %}
        location /auth {
                real_ip_header    X-Forwarded-For;
                proxy_set_header Host $host;
                proxy_pass http://keycloak_server;
                proxy_set_header X-Forwarded-For 172.25.120.59;
                proxy_set_header X-Forwarded-Proto https;
        }
{% endif %}

        # redirect root url to /$host/sdemo
        location = / {
                return 301 https://$host/sdemo;
        }

        location /sdemo {
                proxy_pass http://tomcat_server;
                #proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
        
        location /config {

                rewrite ^/config/(/?)(.*) /$2 break;

                proxy_set_header        Host invenco-nz-qa-tmsfiles-configuration-target.s3-ap-southeast-2.amazonaws.com;
                proxy_pass              https://invenco-nz-qa-tmsfiles-configuration-target.s3-ap-southeast-2.amazonaws.com;
        }

        location /softwarerelease {

                rewrite ^/softwarerelease/(/?)(.*) /$2 break;

                proxy_set_header        Host s3-ap-southeast-2.amazonaws.com;
                proxy_pass              https://s3-ap-southeast-2.amazonaws.com;

        }

        #static content
        location /content/ {
                root   /opt/memribox;
        }

}
                                                                                                                                                         
        